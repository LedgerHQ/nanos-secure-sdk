#*******************************************************************************
#   Ledger SDK
#   (c) 2017 Ledger
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#*******************************************************************************


# consider every intermediate target as final to avoid deleting intermediate files
.SECONDARY:

# disable builtin rules that overload the build process (and the debug log !!)
.SUFFIXES:
MAKEFLAGS += -r

SHELL =       /bin/bash

#default building rules
.SECONDEXPANSION:

ifeq ($(shell $(CC) -v 2>&1 | grep clang),)
$(error Compiler is not CLANG)
endif

ifeq ($(TARGET_NAME),TARGET_NANOX)
ifeq ($(shell $(LD) -v 2>&1 | grep clang),)
LD := $(CC)
ifneq ($(shell [ `$(CC) -v 2>&1 | grep -o "version .*" | cut -f2 -d' ' | cut -f1 -d'.'` -ge 7 ] && echo ok),ok)
$(error Requires at least CLANG 7 to link correctly with -fropi -frwpi)
endif
$(info Linker changed to CLANG)
endif
endif

ifeq ($(filter clean,$(MAKECMDGOALS)),)
-include $(DEPEND_FILES)
endif

listinfo:
	@echo TARGET=$(TARGET)
	@echo TARGET_NAME=$(TARGET_NAME)
	@echo TARGET_ID=$(TARGET_ID)
	@echo TARGET_VERSION=$(TARGET_VERSION)
	@echo APPNAME=$(APPNAME)
	@echo APPVERSION=$(APPVERSION)
	@echo SDK_NAME=$(SDK_NAME)
	@echo SDK_VERSION=$(SDK_VERSION)
	@echo SDK_HASH=$(SDK_HASH)

clean:
	rm -fr $(OBJ_PREFIX)_* $(DBG_PREFIX)_* $(DEP_PREFIX)_* $(GEN_SRC_PREFIX)_* bin debug

clean_target:
	rm -fr $(OBJ_DIR) $(DBG_DIR) $(DEP_DIR) $(GEN_SRC_DIR) bin debug

prepare:
	$(L)echo Prepare directories
	@mkdir -p $(OBJ_DIR) $(DBG_DIR) $(DEP_DIR) $(GEN_SRC_DIR) bin debug

BIN_TARGETS := bin/app.elf bin/app.apdu bin/app.sha256 bin/app.hex
DBG_TARGETS := debug/app.map debug/app.asm

default: $(BIN_TARGETS) $(DBG_TARGETS)

$(OBJ_DIR)/%.o: %.c $(GLYPH_DESTC) prepare Makefile
	@echo "[CC]   $@"
	$(L)$(call cc_cmdline,$(INCLUDES_PATH), $(DEFINES),$<,$@)

$(OBJ_DIR)/%.o: %.s
	@echo "[AS]   $@"
	$(L)$(call as_cmdline,$(INCLUDES_PATH), $(DEFINES),$<,$@)

$(OBJ_DIR)/%.o: %.S
	@echo "[AS]   $@"
	$(L)$(call as_cmdline,$(INCLUDES_PATH), $(DEFINES),$<,$@)

ifeq ($(SCRIPT_LD),)
SCRIPT_LD:=$(BOLOS_SDK)/script.ld
else
$(info Using custom link script: $(SCRIPT_LD))
endif
LDFLAGS  += -T$(SCRIPT_LD)

$(OBJ_DIR)/app.elf: $(OBJECT_FILES) $(SCRIPT_LD)
	@echo "[LINK] $(OBJ_DIR)/app.elf"
	$(L)$(call link_cmdline,$(OBJECT_FILES) $(LDLIBS),$(OBJ_DIR)/app.elf)
	$(L)$(GCCPATH)arm-none-eabi-objcopy -O ihex -S $(OBJ_DIR)/app.elf $(OBJ_DIR)/app.hex
	$(L)$(GCCPATH)arm-none-eabi-objdump -S -d $(OBJ_DIR)/app.elf > $(DBG_DIR)/app.asm
	$(L)$(call objcopy_add_section_cmdline,$(TARGET), ledger.target)
	$(L)$(call objcopy_add_section_cmdline,$(TARGET_NAME), ledger.target_name)
	$(L)$(call objcopy_add_section_cmdline,$(TARGET_ID), ledger.target_id)
	$(L)$(call objcopy_add_section_cmdline,$(TARGET_VERSION), ledger.target_version)
	$(L)$(call objcopy_add_section_cmdline,$(APPNAME), ledger.app_name)
	$(L)$(call objcopy_add_section_cmdline,$(APPVERSION), ledger.app_version)
	$(L)$(call objcopy_add_section_cmdline,$(SDK_NAME), ledger.sdk_name)
	$(L)$(call objcopy_add_section_cmdline,$(SDK_VERSION), ledger.sdk_version)
	$(L)$(call objcopy_add_section_cmdline,$(SDK_HASH), ledger.sdk_hash)

# This targets are generated along $(OBJ_DIR)/app.elf but we can't make them co-target
# otherwise building with `make -j` fails due to multiple threads running simultaneously
# this target while it needs to be run only once.
$(OBJ_DIR)/app.hex $(DBG_DIR)/app.map $(DBG_DIR)/app.asm: $(OBJ_DIR)/app.elf

$(OBJ_DIR)/app.apdu: bin/app.hex debug/app.map
	$(L)python3 -m ledgerblue.loadApp $(APP_LOAD_PARAMS) --offline $(OBJ_DIR)/app.apdu | grep "Application" | cut -f5 -d' ' > $(OBJ_DIR)/app.sha256

# This target is generated along $(OBJ_DIR)/app.apdu but we can't make them co-target
# otherwise building with `make -j` ends up with multiple threads running simultaneously
# this target while it needs to be run only once.
$(OBJ_DIR)/app.sha256: $(OBJ_DIR)/app.apdu

# Set PHONY to force the copy to bin in case we rebuild a previous TARGET
.PHONY: bin/app.elf bin/app.hex bin/app.apdu bin/app.sha256
bin/app.elf bin/app.hex bin/app.apdu bin/app.sha256: bin/app.%: $(OBJ_DIR)/app.%
	@echo "[CP] $< => $@"
	$(L)cp $< $@

# Set PHONY to force the copy to debug in case we rebuild a previous TARGET
.PHONY: debug/app.map debug/app.asm
debug/app.map debug/app.asm: debug/app.%: $(DBG_DIR)/app.%
	@echo "[CP] $< => $@"
	$(L)cp $< $@

### BEGIN GCC COMPILER RULES

# link_cmdline(objects,dest)		Macro that is used to format arguments for the linker
link_cmdline = $(LD) $(LDFLAGS) -o $(2) $(1)
ifneq ($(APP_STACK_SIZE),)
link_cmdline += -Wl,--defsym=stack_size=$(APP_STACK_SIZE)
endif

# cc_cmdline(include,defines,src,dest)	Macro that is used to format arguments for the compiler
# dependency files are generated along the object file
cc_cmdline = $(CC) -c $(CFLAGS) -MMD -MT $(OBJ_DIR)/$(basename $(notdir $(4))).o -MF $(DEP_DIR)/$(basename $(notdir $(4))).d $(addprefix -D,$(2)) $(addprefix -I,$(1)) -o $(4) $(3)

as_cmdline = $(AS) -c $(AFLAGS) $(addprefix -D,$(2)) $(addprefix -I,$(1)) -o $(4) $(3)

# objcopy_add_section_cmdline(data,section_name)
TMPFILE := $(shell mktemp)
objcopy_add_section_cmdline = echo $(1) > $(TMPFILE) && \
    $(GCCPATH)arm-none-eabi-objcopy --add-section $(2)="$(TMPFILE)" \
	--set-section-flags $(2)=noload,readonly \
	$(OBJ_DIR)/app.elf $(OBJ_DIR)/app.elf && \
	rm $(TMPFILE)

### END GCC COMPILER RULES

# Run Clang Static Analyzer
SCAN_BUILD ?= scan-build
SCAN_BUILD_OUTPUT ?= $(CURDIR)/output-scan-build
scan-build:
	$(SCAN_BUILD) --use-cc=$(CC) -analyze-headers -enable-checker security -enable-checker unix -enable-checker valist -o $(SCAN_BUILD_OUTPUT) $(MAKE) default

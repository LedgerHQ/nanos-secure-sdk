
/*******************************************************************************
*   Ledger Nano S - Secure firmware
*   (c) 2021 Ledger
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
********************************************************************************/

const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX[] = {
//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_002E[  45] = { /* code 002E */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x03,  0x00,  0xF8,  0x04,  0x60,  0x3F,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0030[  90] = { /* code 0030 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xB2,  0xFF,
  0x2B,  0x00,  0x20,  0xAE,  0x33,  0xEA,  0x01,  0x90,
  0x0C,  0x00,  0xD0,  0x08,  0xE0,  0x07,  0x00,  0x70,
  0x0D,  0xF0,  0x05,  0x00,  0x50,  0x0F,  0xF1,  0x03,
  0x00,  0x30,  0x1F,  0xF1,  0x03,  0x00,  0x30,  0x1F,
  0xF0,  0x05,  0x00,  0x50,  0x0F,  0xD0,  0x07,  0x00,
  0x70,  0x0D,  0x80,  0x0C,  0x00,  0xD0,  0x09,  0x10,
  0xAE,  0x33,  0xEA,  0x01,  0x00,  0xB2,  0xFF,  0x2B,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0031[  90] = { /* code 0031 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0xFB,
  0x01,  0x00,  0x00,  0xE6,  0xFA,  0x01,  0x00,  0x10,
  0x3C,  0xF3,  0x01,  0x00,  0x00,  0x00,  0xF3,  0x01,
  0x00,  0x00,  0x00,  0xF3,  0x01,  0x00,  0x00,  0x00,
  0xF3,  0x01,  0x00,  0x00,  0x00,  0xF3,  0x01,  0x00,
  0x00,  0x00,  0xF3,  0x01,  0x00,  0x00,  0x00,  0xF3,
  0x01,  0x00,  0x00,  0x00,  0xF3,  0x01,  0x00,  0x00,
  0x00,  0xF3,  0x01,  0x00,  0x00,  0x00,  0xF3,  0x01,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0032[  90] = { /* code 0032 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xD8,  0xEF,
  0x2B,  0x00,  0xB0,  0x5C,  0x32,  0xEB,  0x01,  0x00,
  0x00,  0x00,  0xF0,  0x06,  0x00,  0x00,  0x00,  0xE0,
  0x07,  0x00,  0x00,  0x00,  0xF2,  0x03,  0x00,  0x00,
  0x00,  0xBB,  0x00,  0x00,  0x00,  0x80,  0x1D,  0x00,
  0x00,  0x00,  0xD8,  0x02,  0x00,  0x00,  0xA0,  0x1D,
  0x00,  0x00,  0x00,  0xBA,  0x00,  0x00,  0x00,  0xB0,
  0x4E,  0x33,  0x33,  0x03,  0xF1,  0xFF,  0xFF,  0xFF,
  0x1F,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0033[  90] = { /* code 0033 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x20,  0xD9,  0xFF,
  0x4B,  0x00,  0xD0,  0x4A,  0x32,  0xF9,  0x03,  0x00,
  0x00,  0x00,  0xE0,  0x08,  0x00,  0x00,  0x00,  0xE0,
  0x07,  0x00,  0x00,  0x20,  0xDB,  0x00,  0x00,  0xF3,
  0xFF,  0x1B,  0x00,  0x00,  0x30,  0x43,  0xEA,  0x04,
  0x00,  0x00,  0x00,  0xA0,  0x0C,  0x00,  0x00,  0x00,
  0x70,  0x0F,  0x00,  0x00,  0x00,  0xA0,  0x0C,  0xA3,
  0x35,  0x42,  0xFA,  0x04,  0x91,  0xFD,  0xEF,  0x3A,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0034[  90] = { /* code 0034 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,
  0xBE,  0x00,  0x00,  0x00,  0xC0,  0xBD,  0x00,  0x00,
  0x00,  0xC8,  0xB7,  0x00,  0x00,  0x40,  0x1E,  0xB7,
  0x00,  0x00,  0xE1,  0x05,  0xB9,  0x00,  0x00,  0x9B,
  0x00,  0xB9,  0x00,  0x70,  0x0C,  0x00,  0xB9,  0x00,
  0xE3,  0x02,  0x00,  0xB9,  0x00,  0xF9,  0xFF,  0xFF,
  0xFF,  0x9F,  0x32,  0x33,  0x33,  0xCB,  0x23,  0x00,
  0x00,  0x00,  0xB9,  0x00,  0x00,  0x00,  0x00,  0xB9,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0035[  90] = { /* code 0035 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x10,  0xFF,  0xFF,
  0xFF,  0x01,  0x30,  0x4F,  0x33,  0x33,  0x00,  0x40,
  0x0F,  0x00,  0x00,  0x00,  0x50,  0x0D,  0x00,  0x00,
  0x00,  0x60,  0x0C,  0x00,  0x00,  0x00,  0x70,  0xEF,
  0xFF,  0x5B,  0x00,  0x00,  0x35,  0x41,  0xF8,  0x06,
  0x00,  0x00,  0x00,  0x90,  0x0E,  0x00,  0x00,  0x00,
  0x50,  0x0F,  0x00,  0x00,  0x00,  0xA0,  0x0C,  0xA0,
  0x36,  0x43,  0xFA,  0x04,  0x70,  0xFC,  0xEF,  0x3A,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0036[  90] = { /* code 0036 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x30,  0xEA,
  0xFF,  0x03,  0x00,  0xF5,  0x39,  0x21,  0x00,  0x10,
  0x7F,  0x00,  0x00,  0x00,  0x70,  0x0E,  0x00,  0x00,
  0x00,  0xC0,  0x09,  0x00,  0x00,  0x00,  0xE0,  0x87,
  0xFE,  0x8E,  0x00,  0xF0,  0x8E,  0x12,  0xE4,  0x0A,
  0xF0,  0x08,  0x00,  0x50,  0x0F,  0xC0,  0x06,  0x00,
  0x30,  0x1F,  0x80,  0x0C,  0x00,  0x60,  0x0E,  0x00,
  0xBD,  0x23,  0xE6,  0x07,  0x00,  0xA1,  0xFE,  0x6D,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0037[  90] = { /* code 0037 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0xF3,  0xFF,  0xFF,
  0xFF,  0x1F,  0x30,  0x33,  0x33,  0xA3,  0x0E,  0x00,
  0x00,  0x00,  0xE0,  0x06,  0x00,  0x00,  0x00,  0xE6,
  0x00,  0x00,  0x00,  0x00,  0x7E,  0x00,  0x00,  0x00,
  0x60,  0x1F,  0x00,  0x00,  0x00,  0xD0,  0x08,  0x00,
  0x00,  0x00,  0xF5,  0x01,  0x00,  0x00,  0x00,  0x9D,
  0x00,  0x00,  0x00,  0x50,  0x2F,  0x00,  0x00,  0x00,
  0xC0,  0x0A,  0x00,  0x00,  0x00,  0xF4,  0x03,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0038[  90] = { /* code 0038 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xC5,  0xFF,
  0x5C,  0x00,  0x50,  0x6F,  0x22,  0xF7,  0x05,  0xA0,
  0x0A,  0x00,  0xB0,  0x09,  0x80,  0x0C,  0x00,  0xD0,
  0x08,  0x10,  0xBD,  0x22,  0xCB,  0x00,  0x00,  0xD1,
  0xFF,  0x0B,  0x00,  0x10,  0xBC,  0x74,  0xCE,  0x01,
  0xC0,  0x0A,  0x00,  0xC0,  0x0C,  0xF1,  0x04,  0x00,
  0x40,  0x0F,  0xF0,  0x05,  0x00,  0x60,  0x0F,  0x90,
  0x5E,  0x21,  0xE6,  0x08,  0x00,  0xC7,  0xFF,  0x6C,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_REGULAR_13_18PX_0039[  90] = { /* code 0039 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xC5,  0xEF,
  0x1A,  0x00,  0x60,  0x7F,  0x32,  0xEA,  0x01,  0xE0,
  0x07,  0x00,  0xB0,  0x09,  0xF1,  0x03,  0x00,  0x60,
  0x0D,  0xF0,  0x06,  0x00,  0x70,  0x0F,  0x90,  0x5E,
  0x21,  0xE7,  0x0F,  0x00,  0xE8,  0xEF,  0x68,  0x0F,
  0x00,  0x00,  0x00,  0x80,  0x0D,  0x00,  0x00,  0x00,
  0xD0,  0x09,  0x00,  0x00,  0x00,  0xF7,  0x02,  0x10,
  0x12,  0x93,  0x6F,  0x00,  0x30,  0xFE,  0xAE,  0x03,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

};

const bagl_font_character_t charactersOPEN_SANS_REGULAR_13_18PX[12] = {
   {   5,  45, 0}, /* code 002E */
   {   5,  45, 0}, /* code 002F */ // trashed
   {  10,  90, 45}, /* code 0030 */
   {  10,  90, 135}, /* code 0031 */
   {  10,  90, 225}, /* code 0032 */
   {  10,  90, 315}, /* code 0033 */
   {  10,  90, 405}, /* code 0034 */
   {  10,  90, 495}, /* code 0035 */
   {  10,  90, 585}, /* code 0036 */
   {  10,  90, 675}, /* code 0037 */
   {  10,  90, 765}, /* code 0038 */
   {  10,  90, 855}  /* code 0039 */
};

const bagl_font_t fontOPEN_SANS_REGULAR_13_18PX = {
   BAGL_FONT_OPEN_SANS_REGULAR_13_18PX,
   4, /* font bit per pixels */
   18,  /* font height in pixels   */
   13,  /* font ascent (baseline) in pixels  */
   0, /* kerning */
   0x002E, /* first character */
   0x0039, /* last character  */
   charactersOPEN_SANS_REGULAR_13_18PX 
  ,bitmapOPEN_SANS_REGULAR_13_18PX
};

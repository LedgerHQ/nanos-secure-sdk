
/*******************************************************************************
*   Ledger Nano S - Secure firmware
*   (c) 2021 Ledger
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
********************************************************************************/

const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX[] = {
//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_002E[  45] = { /* code 002E */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x20,  0x17,  0x00,  0xFB,  0x09,  0x80,  0x5F,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0030[  90] = { /* code 0030 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xB3,  0xFF,
  0x2B,  0x00,  0x30,  0xFF,  0xAA,  0xEF,  0x02,  0xB0,
  0x5F,  0x00,  0xF6,  0x0A,  0xF0,  0x0E,  0x00,  0xE0,
  0x0F,  0xF2,  0x0C,  0x00,  0xC0,  0x2F,  0xF3,  0x0B,
  0x00,  0xB0,  0x3F,  0xF3,  0x0B,  0x00,  0xB0,  0x3F,
  0xF2,  0x0C,  0x00,  0xC0,  0x2F,  0xF0,  0x0E,  0x00,
  0xE0,  0x0F,  0xA0,  0x5F,  0x00,  0xF5,  0x0B,  0x20,
  0xFE,  0xAA,  0xFF,  0x03,  0x00,  0xB2,  0xFF,  0x3B,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0031[  90] = { /* code 0031 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xF9,
  0x09,  0x00,  0x00,  0xC1,  0xFF,  0x09,  0x00,  0x30,
  0xEE,  0xF8,  0x09,  0x00,  0x10,  0x2B,  0xF5,  0x09,
  0x00,  0x00,  0x00,  0xF5,  0x09,  0x00,  0x00,  0x00,
  0xF5,  0x09,  0x00,  0x00,  0x00,  0xF5,  0x09,  0x00,
  0x00,  0x00,  0xF5,  0x09,  0x00,  0x00,  0x00,  0xF5,
  0x09,  0x00,  0x00,  0x00,  0xF5,  0x09,  0x00,  0x00,
  0x00,  0xF5,  0x09,  0x00,  0x00,  0x00,  0xF5,  0x09,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0032[  90] = { /* code 0032 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xC7,  0xFF,
  0x4C,  0x00,  0xD0,  0xEF,  0xBA,  0xFF,  0x04,  0x50,
  0x07,  0x00,  0xF6,  0x0B,  0x00,  0x00,  0x00,  0xF2,
  0x0B,  0x00,  0x00,  0x00,  0xF6,  0x08,  0x00,  0x00,
  0x10,  0xEE,  0x01,  0x00,  0x00,  0xD1,  0x4F,  0x00,
  0x00,  0x10,  0xED,  0x04,  0x00,  0x00,  0xE2,  0x3E,
  0x00,  0x00,  0x30,  0xDE,  0x02,  0x00,  0x00,  0xE1,
  0xCF,  0xBB,  0xBB,  0x2B,  0xF3,  0xFF,  0xFF,  0xFF,
  0x3F,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0033[  90] = { /* code 0033 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x30,  0xD9,  0xFF,
  0x5C,  0x00,  0xE0,  0xCF,  0xB9,  0xFF,  0x06,  0x30,
  0x02,  0x00,  0xF5,  0x0B,  0x00,  0x00,  0x00,  0xF3,
  0x0A,  0x00,  0x00,  0x30,  0xEC,  0x03,  0x00,  0xF5,
  0xFF,  0x2C,  0x00,  0x00,  0x93,  0xB9,  0xEF,  0x04,
  0x00,  0x00,  0x00,  0xF3,  0x0E,  0x00,  0x00,  0x00,
  0xE0,  0x1F,  0x10,  0x00,  0x00,  0xF4,  0x0F,  0xF3,
  0x9C,  0xB9,  0xFF,  0x06,  0x91,  0xFD,  0xEF,  0x4B,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0034[  90] = { /* code 0034 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,
  0xFF,  0x00,  0x00,  0x00,  0xE1,  0xFF,  0x00,  0x00,
  0x00,  0xDA,  0xFE,  0x00,  0x00,  0x60,  0x4F,  0xFE,
  0x00,  0x00,  0xF2,  0x09,  0xFF,  0x00,  0x00,  0xDC,
  0x00,  0xFF,  0x00,  0x80,  0x3F,  0x00,  0xFF,  0x00,
  0xF3,  0x07,  0x00,  0xFF,  0x00,  0xF9,  0xFF,  0xFF,
  0xFF,  0xBF,  0x95,  0x99,  0x99,  0xFF,  0x79,  0x00,
  0x00,  0x00,  0xFF,  0x00,  0x00,  0x00,  0x00,  0xFF,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0035[  90] = { /* code 0035 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0xFF,  0xFF,
  0xFF,  0x03,  0x50,  0xDF,  0xBB,  0xBB,  0x02,  0x70,
  0x5F,  0x00,  0x00,  0x00,  0x90,  0x3F,  0x00,  0x00,
  0x00,  0xA0,  0xEF,  0xFF,  0x5C,  0x00,  0x60,  0xAC,
  0xC9,  0xFF,  0x06,  0x00,  0x00,  0x00,  0xF5,  0x0E,
  0x00,  0x00,  0x00,  0xE0,  0x1F,  0x00,  0x00,  0x00,
  0xE0,  0x0F,  0x20,  0x00,  0x00,  0xF6,  0x0C,  0xF0,
  0xAD,  0xC9,  0xEF,  0x03,  0x80,  0xFC,  0xEF,  0x2A,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0036[  90] = { /* code 0036 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x30,  0xEA,
  0xFF,  0x04,  0x00,  0xF7,  0xAF,  0x99,  0x03,  0x30,
  0xBF,  0x00,  0x00,  0x00,  0xB0,  0x1F,  0x00,  0x00,
  0x00,  0xF0,  0x4C,  0xFC,  0x9E,  0x00,  0xF1,  0xFE,
  0x89,  0xFD,  0x0A,  0xF3,  0x2F,  0x00,  0xD0,  0x1F,
  0xF2,  0x0B,  0x00,  0x90,  0x3F,  0xF0,  0x0E,  0x00,
  0xA0,  0x3F,  0xB0,  0x5F,  0x00,  0xE1,  0x0F,  0x20,
  0xFE,  0x9B,  0xFE,  0x07,  0x00,  0xA2,  0xFE,  0x6C,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0037[  90] = { /* code 0037 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0xF5,  0xFF,  0xFF,
  0xFF,  0x3F,  0xB4,  0xBB,  0xBB,  0xFB,  0x2F,  0x00,
  0x00,  0x00,  0xF2,  0x0B,  0x00,  0x00,  0x00,  0xFA,
  0x03,  0x00,  0x00,  0x10,  0xCF,  0x00,  0x00,  0x00,
  0x90,  0x4F,  0x00,  0x00,  0x00,  0xF1,  0x0D,  0x00,
  0x00,  0x00,  0xF9,  0x06,  0x00,  0x00,  0x10,  0xEF,
  0x00,  0x00,  0x00,  0x80,  0x6F,  0x00,  0x00,  0x00,
  0xF1,  0x0E,  0x00,  0x00,  0x00,  0xF8,  0x08,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0038[  90] = { /* code 0038 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xC6,  0xFF,
  0x6C,  0x00,  0x70,  0xEF,  0x88,  0xFE,  0x07,  0xC0,
  0x3F,  0x00,  0xF3,  0x0C,  0xC0,  0x3F,  0x00,  0xF3,
  0x0B,  0x50,  0xDF,  0x33,  0xFD,  0x04,  0x00,  0xF5,
  0xFF,  0x3E,  0x00,  0x10,  0xFC,  0xEC,  0xBF,  0x01,
  0xC0,  0x6F,  0x00,  0xF9,  0x0C,  0xF2,  0x0C,  0x00,
  0xC0,  0x3F,  0xF2,  0x0D,  0x00,  0xD0,  0x2F,  0xC0,
  0xDF,  0x88,  0xFD,  0x0B,  0x00,  0xD8,  0xFF,  0x7C,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

//const unsigned char bitmapOPEN_SANS_SEMIBOLD_13_18PX_0039[  90] = { /* code 0039 */
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xC5,  0xEF,
  0x2B,  0x00,  0x60,  0xEF,  0xBA,  0xEF,  0x02,  0xE0,
  0x1F,  0x00,  0xF6,  0x0B,  0xF3,  0x0A,  0x00,  0xD0,
  0x0F,  0xF3,  0x0A,  0x00,  0xB0,  0x3F,  0xF1,  0x0E,
  0x00,  0xF2,  0x3F,  0xA0,  0xDF,  0x98,  0xDF,  0x2F,
  0x00,  0xE8,  0xDF,  0xB5,  0x0F,  0x00,  0x00,  0x00,
  0xF1,  0x0B,  0x00,  0x00,  0x00,  0xFB,  0x04,  0x40,
  0x99,  0xEA,  0x8F,  0x00,  0x40,  0xFF,  0xAE,  0x04,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
  0x00,  0x00
  ,
//};

};

const bagl_font_character_t charactersOPEN_SANS_SEMIBOLD_13_18PX[12] = {
   {   5,  45, 0}, /* code 002E */
   {   5,  45, 0}, /* code 002F */ // trashed
   {  10,  90, 45}, /* code 0030 */
   {  10,  90, 135}, /* code 0031 */
   {  10,  90, 225}, /* code 0032 */
   {  10,  90, 315}, /* code 0033 */
   {  10,  90, 405}, /* code 0034 */
   {  10,  90, 495}, /* code 0035 */
   {  10,  90, 585}, /* code 0036 */
   {  10,  90, 675}, /* code 0037 */
   {  10,  90, 765}, /* code 0038 */
   {  10,  90, 855}  /* code 0039 */
};

const bagl_font_t fontOPEN_SANS_SEMIBOLD_13_18PX = {
   BAGL_FONT_OPEN_SANS_SEMIBOLD_13_18PX,
   4, /* font bit per pixels */
   18,  /* font height in pixels   */
   13,  /* font ascent (baseline) in pixels  */
   0, /* kerning */
   0x002E, /* first character */
   0x0039, /* last character  */
   charactersOPEN_SANS_SEMIBOLD_13_18PX 
  ,bitmapOPEN_SANS_SEMIBOLD_13_18PX
};
